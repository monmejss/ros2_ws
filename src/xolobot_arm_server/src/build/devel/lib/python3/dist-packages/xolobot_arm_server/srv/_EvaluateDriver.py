# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xolobot_arm_server/EvaluateDriverRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EvaluateDriverRequest(genpy.Message):
  _md5sum = "43613f0303fdebb8cb56833691c24572"
  _type = "xolobot_arm_server/EvaluateDriverRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string weightsfile
int64 maxtime
float64 touchthreshold
"""
  __slots__ = ['weightsfile','maxtime','touchthreshold']
  _slot_types = ['string','int64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       weightsfile,maxtime,touchthreshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvaluateDriverRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.weightsfile is None:
        self.weightsfile = ''
      if self.maxtime is None:
        self.maxtime = 0
      if self.touchthreshold is None:
        self.touchthreshold = 0.
    else:
      self.weightsfile = ''
      self.maxtime = 0
      self.touchthreshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.weightsfile
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.maxtime, _x.touchthreshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.weightsfile = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.weightsfile = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.maxtime, _x.touchthreshold,) = _get_struct_qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.weightsfile
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.maxtime, _x.touchthreshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.weightsfile = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.weightsfile = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.maxtime, _x.touchthreshold,) = _get_struct_qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qd = None
def _get_struct_qd():
    global _struct_qd
    if _struct_qd is None:
        _struct_qd = struct.Struct("<qd")
    return _struct_qd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xolobot_arm_server/EvaluateDriverResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EvaluateDriverResponse(genpy.Message):
  _md5sum = "5afa6dfa06e42d81ac3c81221276be0e"
  _type = "xolobot_arm_server/EvaluateDriverResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 time
float64 dist2go
float64 damage
float64 energy
float64 velocity
float64 crashRisk

"""
  __slots__ = ['time','dist2go','damage','energy','velocity','crashRisk']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,dist2go,damage,energy,velocity,crashRisk

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EvaluateDriverResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.dist2go is None:
        self.dist2go = 0.
      if self.damage is None:
        self.damage = 0.
      if self.energy is None:
        self.energy = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.crashRisk is None:
        self.crashRisk = 0.
    else:
      self.time = 0.
      self.dist2go = 0.
      self.damage = 0.
      self.energy = 0.
      self.velocity = 0.
      self.crashRisk = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.time, _x.dist2go, _x.damage, _x.energy, _x.velocity, _x.crashRisk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.time, _x.dist2go, _x.damage, _x.energy, _x.velocity, _x.crashRisk,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.time, _x.dist2go, _x.damage, _x.energy, _x.velocity, _x.crashRisk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.time, _x.dist2go, _x.damage, _x.energy, _x.velocity, _x.crashRisk,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
class EvaluateDriver(object):
  _type          = 'xolobot_arm_server/EvaluateDriver'
  _md5sum = '6abca6379b4838beaac4cbca82c88812'
  _request_class  = EvaluateDriverRequest
  _response_class = EvaluateDriverResponse
