// Generated by gencpp from file xolobot_arm_server/EvaluateDriverRequest.msg
// DO NOT EDIT!


#ifndef XOLOBOT_ARM_SERVER_MESSAGE_EVALUATEDRIVERREQUEST_H
#define XOLOBOT_ARM_SERVER_MESSAGE_EVALUATEDRIVERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xolobot_arm_server
{
template <class ContainerAllocator>
struct EvaluateDriverRequest_
{
  typedef EvaluateDriverRequest_<ContainerAllocator> Type;

  EvaluateDriverRequest_()
    : weightsfile()
    , maxtime(0)
    , touchthreshold(0.0)  {
    }
  EvaluateDriverRequest_(const ContainerAllocator& _alloc)
    : weightsfile(_alloc)
    , maxtime(0)
    , touchthreshold(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _weightsfile_type;
  _weightsfile_type weightsfile;

   typedef int64_t _maxtime_type;
  _maxtime_type maxtime;

   typedef double _touchthreshold_type;
  _touchthreshold_type touchthreshold;





  typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluateDriverRequest_

typedef ::xolobot_arm_server::EvaluateDriverRequest_<std::allocator<void> > EvaluateDriverRequest;

typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverRequest > EvaluateDriverRequestPtr;
typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverRequest const> EvaluateDriverRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator1> & lhs, const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator2> & rhs)
{
  return lhs.weightsfile == rhs.weightsfile &&
    lhs.maxtime == rhs.maxtime &&
    lhs.touchthreshold == rhs.touchthreshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator1> & lhs, const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xolobot_arm_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43613f0303fdebb8cb56833691c24572";
  }

  static const char* value(const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43613f0303fdebb8ULL;
  static const uint64_t static_value2 = 0xcb56833691c24572ULL;
};

template<class ContainerAllocator>
struct DataType< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xolobot_arm_server/EvaluateDriverRequest";
  }

  static const char* value(const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string weightsfile\n"
"int64 maxtime\n"
"float64 touchthreshold\n"
;
  }

  static const char* value(const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.weightsfile);
      stream.next(m.maxtime);
      stream.next(m.touchthreshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluateDriverRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xolobot_arm_server::EvaluateDriverRequest_<ContainerAllocator>& v)
  {
    s << indent << "weightsfile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.weightsfile);
    s << indent << "maxtime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.maxtime);
    s << indent << "touchthreshold: ";
    Printer<double>::stream(s, indent + "  ", v.touchthreshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XOLOBOT_ARM_SERVER_MESSAGE_EVALUATEDRIVERREQUEST_H
