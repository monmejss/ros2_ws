// Generated by gencpp from file xolobot_arm_server/EvaluateDriverResponse.msg
// DO NOT EDIT!


#ifndef XOLOBOT_ARM_SERVER_MESSAGE_EVALUATEDRIVERRESPONSE_H
#define XOLOBOT_ARM_SERVER_MESSAGE_EVALUATEDRIVERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xolobot_arm_server
{
template <class ContainerAllocator>
struct EvaluateDriverResponse_
{
  typedef EvaluateDriverResponse_<ContainerAllocator> Type;

  EvaluateDriverResponse_()
    : time(0.0)
    , dist2go(0.0)
    , damage(0.0)
    , energy(0.0)
    , velocity(0.0)
    , crashRisk(0.0)  {
    }
  EvaluateDriverResponse_(const ContainerAllocator& _alloc)
    : time(0.0)
    , dist2go(0.0)
    , damage(0.0)
    , energy(0.0)
    , velocity(0.0)
    , crashRisk(0.0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef double _dist2go_type;
  _dist2go_type dist2go;

   typedef double _damage_type;
  _damage_type damage;

   typedef double _energy_type;
  _energy_type energy;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _crashRisk_type;
  _crashRisk_type crashRisk;





  typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluateDriverResponse_

typedef ::xolobot_arm_server::EvaluateDriverResponse_<std::allocator<void> > EvaluateDriverResponse;

typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverResponse > EvaluateDriverResponsePtr;
typedef boost::shared_ptr< ::xolobot_arm_server::EvaluateDriverResponse const> EvaluateDriverResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator1> & lhs, const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.dist2go == rhs.dist2go &&
    lhs.damage == rhs.damage &&
    lhs.energy == rhs.energy &&
    lhs.velocity == rhs.velocity &&
    lhs.crashRisk == rhs.crashRisk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator1> & lhs, const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xolobot_arm_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5afa6dfa06e42d81ac3c81221276be0e";
  }

  static const char* value(const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5afa6dfa06e42d81ULL;
  static const uint64_t static_value2 = 0xac3c81221276be0eULL;
};

template<class ContainerAllocator>
struct DataType< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xolobot_arm_server/EvaluateDriverResponse";
  }

  static const char* value(const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n"
"float64 dist2go\n"
"float64 damage\n"
"float64 energy\n"
"float64 velocity\n"
"float64 crashRisk\n"
"\n"
;
  }

  static const char* value(const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.dist2go);
      stream.next(m.damage);
      stream.next(m.energy);
      stream.next(m.velocity);
      stream.next(m.crashRisk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluateDriverResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xolobot_arm_server::EvaluateDriverResponse_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "dist2go: ";
    Printer<double>::stream(s, indent + "  ", v.dist2go);
    s << indent << "damage: ";
    Printer<double>::stream(s, indent + "  ", v.damage);
    s << indent << "energy: ";
    Printer<double>::stream(s, indent + "  ", v.energy);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "crashRisk: ";
    Printer<double>::stream(s, indent + "  ", v.crashRisk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XOLOBOT_ARM_SERVER_MESSAGE_EVALUATEDRIVERRESPONSE_H
